using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace IdleDB.Migrations
{
    /// <inheritdoc />
    public partial class AddLevels : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Areas",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Number = table.Column<int>(type: "INTEGER", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Areas", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Levels",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AreaId = table.Column<int>(type: "INTEGER", nullable: false),
                    Number = table.Column<int>(type: "INTEGER", nullable: false),
                    ExperienceReward = table.Column<int>(type: "INTEGER", nullable: false),
                    GoldReward = table.Column<int>(type: "INTEGER", nullable: false),
                    DiamondReward = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Levels", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Levels_Areas_AreaId",
                        column: x => x.AreaId,
                        principalTable: "Areas",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Enemies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    LevelId = table.Column<int>(type: "INTEGER", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: false),
                    PhysicalDamage = table.Column<decimal>(type: "TEXT", nullable: false),
                    AetherDamage = table.Column<decimal>(type: "TEXT", nullable: false),
                    FireDamage = table.Column<decimal>(type: "TEXT", nullable: false),
                    ColdDamage = table.Column<decimal>(type: "TEXT", nullable: false),
                    PoisonDamage = table.Column<decimal>(type: "TEXT", nullable: false),
                    CritRating = table.Column<int>(type: "INTEGER", nullable: false),
                    CritMultiplier = table.Column<decimal>(type: "TEXT", nullable: false),
                    ActionSpeed = table.Column<decimal>(type: "TEXT", nullable: false),
                    Health = table.Column<int>(type: "INTEGER", nullable: false),
                    Armour = table.Column<int>(type: "INTEGER", nullable: false),
                    Barrier = table.Column<int>(type: "INTEGER", nullable: false),
                    Evasion = table.Column<decimal>(type: "TEXT", nullable: false),
                    FireResistance = table.Column<decimal>(type: "TEXT", nullable: false),
                    ColdResistance = table.Column<decimal>(type: "TEXT", nullable: false),
                    PoisonResistance = table.Column<decimal>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Enemies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Enemies_Levels_LevelId",
                        column: x => x.LevelId,
                        principalTable: "Levels",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Enemies_LevelId",
                table: "Enemies",
                column: "LevelId");

            migrationBuilder.CreateIndex(
                name: "IX_Levels_AreaId",
                table: "Levels",
                column: "AreaId");

            migrationBuilder.InsertData(
                table: "Areas",
                columns: ["Id", "Number", "Name"],
                values: new object[,]
                {
                    { 1, 1, "Shoreline" },
                    { 2, 2, "Peninsula" },
                    { 3, 3, "River" },
                    { 4, 4, "Plains" },
                    { 5, 5, "Tundra" },
                    { 6, 6, "Plateau" },
                    { 7, 7, "Jungle" },
                    { 8, 8, "Ruins" },
                    { 9, 9, "Crater" },
                    { 10, 10, "Volcano" },
                });

            migrationBuilder.InsertData(
                table: "Levels",
                columns: ["Id", "AreaId", "Number", "ExperienceReward", "GoldReward", "DiamondReward"],
                values: new object[,]
                {
                    { 1, 1, 1, 20, 20, 1000 },
                    { 2, 1, 2, 60, 60, 1000 },
                    { 3, 1, 3, 120, 120, 1000 },
                    { 4, 1, 4, 200, 200, 1000 },
                    { 5, 1, 5, 300, 300, 1000 },
                    { 6, 1, 6, 420, 420, 1000 },
                    { 7, 1, 7, 560, 560, 1000 },
                    { 8, 1, 8, 720, 720, 1000 },
                    { 9, 1, 9, 900, 900, 1000 },
                    { 10, 1, 10, 5000, 5000, 10000 },
                    { 11, 1, 11, 1320, 1320, 1000 },
                    { 12, 1, 12, 1560, 1560, 1000 },
                    { 13, 1, 13, 1820, 1820, 1000 },
                    { 14, 1, 14, 2100, 2100, 1000 },
                    { 15, 1, 15, 2400, 2400, 1000 },
                    { 16, 1, 16, 2720, 2720, 1000 },
                    { 17, 1, 17, 3060, 3060, 1000 },
                    { 18, 1, 18, 3420, 3420, 1000 },
                    { 19, 1, 19, 3800, 3800, 1000 },
                    { 20, 1, 20, 10000, 10000, 10000 },

                    { 21, 2, 1, 4620, 4620, 1000 },
                    { 22, 2, 2, 5060, 5060, 1000 },
                    { 23, 2, 3, 5520, 5520, 1000 },
                    { 24, 2, 4, 6000, 6000, 1000 },
                    { 25, 2, 5, 6500, 6500, 1000 },
                    { 26, 2, 6, 7020, 7020, 1000 },
                    { 27, 2, 7, 7560, 7560, 1000 },
                    { 28, 2, 8, 8120, 8120, 1000 },
                    { 29, 2, 9, 8700, 8700, 1000 },
                    { 30, 2, 10, 30000, 30000, 10000 },
                    { 31, 2, 11, 9920, 9920, 1000 },
                    { 32, 2, 12, 10560, 10560, 1000 },
                    { 33, 2, 13, 11220, 11220, 1000 },
                    { 34, 2, 14, 11900, 11900, 1000 },
                    { 35, 2, 15, 12600, 12600, 1000 },
                    { 36, 2, 16, 13320, 13320, 1000 },
                    { 37, 2, 17, 14060, 14060, 1000 },
                    { 38, 2, 18, 14820, 14820, 1000 },
                    { 39, 2, 19, 15600, 15600, 1000 },
                    { 40, 2, 20, 50000, 50000, 10000 },

                    { 41, 3, 1, 17220, 17220, 1000 },
                    { 42, 3, 2, 18060, 18060, 1000 },
                    { 43, 3, 3, 18920, 18920, 1000 },
                    { 44, 3, 4, 19800, 19800, 1000 },
                    { 45, 3, 5, 20700, 20700, 1000 },
                    { 46, 3, 6, 21620, 21620, 1000 },
                    { 47, 3, 7, 22560, 22560, 1000 },
                    { 48, 3, 8, 23520, 23520, 1000 },
                    { 49, 3, 9, 24500, 24500, 1000 },
                    { 50, 3, 10, 75000, 75000, 10000 },
                    { 51, 3, 11, 26520, 26520, 1000 },
                    { 52, 3, 12, 27560, 27560, 1000 },
                    { 53, 3, 13, 28620, 28620, 1000 },
                    { 54, 3, 14, 29700, 29700, 1000 },
                    { 55, 3, 15, 30800, 30800, 1000 },
                    { 56, 3, 16, 31920, 31920, 1000 },
                    { 57, 3, 17, 33060, 33060, 1000 },
                    { 58, 3, 18, 34220, 34220, 1000 },
                    { 59, 3, 19, 35400, 35400, 1000 },
                    { 60, 3, 20, 100000, 100000, 10000 },

                    { 61, 4, 1, 37820, 37820, 1000 },
                    { 62, 4, 2, 39060, 39060, 1000 },
                    { 63, 4, 3, 40320, 40320, 1000 },
                    { 64, 4, 4, 41600, 41600, 1000 },
                    { 65, 4, 5, 42900, 42900, 1000 },
                    { 66, 4, 6, 44220, 44220, 1000 },
                    { 67, 4, 7, 45560, 45560, 1000 },
                    { 68, 4, 8, 46920, 46920, 1000 },
                    { 69, 4, 9, 48300, 48300, 1000 },
                    { 70, 4, 10, 150000, 150000, 10000 },
                    { 71, 4, 11, 51120, 51120, 1000 },
                    { 72, 4, 12, 52560, 52560, 1000 },
                    { 73, 4, 13, 54020, 54020, 1000 },
                    { 74, 4, 14, 55500, 55500, 1000 },
                    { 75, 4, 15, 57000, 57000, 1000 },
                    { 76, 4, 16, 58520, 58520, 1000 },
                    { 77, 4, 17, 60060, 60060, 1000 },
                    { 78, 4, 18, 61620, 61620, 1000 },
                    { 79, 4, 19, 63200, 63200, 1000 },
                    { 80, 4, 20, 200000, 200000, 10000 },

                    { 81, 5, 1, 66420, 66420, 1000 },
                    { 82, 5, 2, 68060, 68060, 1000 },
                    { 83, 5, 3, 69720, 69720, 1000 },
                    { 84, 5, 4, 71400, 71400, 1000 },
                    { 85, 5, 5, 73100, 73100, 1000 },
                    { 86, 5, 6, 74820, 74820, 1000 },
                    { 87, 5, 7, 76560, 76560, 1000 },
                    { 88, 5, 8, 78320, 78320, 1000 },
                    { 89, 5, 9, 80100, 80100, 1000 },
                    { 90, 5, 10, 300000, 300000, 10000 },
                    { 91, 5, 11, 83720, 83720, 1000 },
                    { 92, 5, 12, 85560, 85560, 1000 },
                    { 93, 5, 13, 87420, 87420, 1000 },
                    { 94, 5, 14, 89300, 89300, 1000 },
                    { 95, 5, 15, 91200, 91200, 1000 },
                    { 96, 5, 16, 93120, 93120, 1000 },
                    { 97, 5, 17, 95060, 95060, 1000 },
                    { 98, 5, 18, 97020, 97020, 1000 },
                    { 99, 5, 19, 99000, 99000, 1000 },
                    { 100, 5, 20, 400000, 400000, 10000 },

                    { 101, 6, 1, 103020, 103020, 1000 },
                    { 102, 6, 2, 105060, 105060, 1000 },
                    { 103, 6, 3, 107120, 107120, 1000 },
                    { 104, 6, 4, 109200, 109200, 1000 },
                    { 105, 6, 5, 111300, 111300, 1000 },
                    { 106, 6, 6, 113420, 113420, 1000 },
                    { 107, 6, 7, 115560, 115560, 1000 },
                    { 108, 6, 8, 117720, 117720, 1000 },
                    { 109, 6, 9, 119900, 119900, 1000 },
                    { 110, 6, 10, 500000, 500000, 10000 },
                    { 111, 6, 11, 124320, 124320, 1000 },
                    { 112, 6, 12, 126560, 126560, 1000 },
                    { 113, 6, 13, 128820, 128820, 1000 },
                    { 114, 6, 14, 131100, 131100, 1000 },
                    { 115, 6, 15, 133400, 133400, 1000 },
                    { 116, 6, 16, 135720, 135720, 1000 },
                    { 117, 6, 17, 138060, 138060, 1000 },
                    { 118, 6, 18, 140420, 140420, 1000 },
                    { 119, 6, 19, 142800, 142800, 1000 },
                    { 120, 6, 20, 600000, 600000, 10000 },

                    { 121, 7, 1, 147620, 147620, 1000 },
                    { 122, 7, 2, 150060, 150060, 1000 },
                    { 123, 7, 3, 152520, 152520, 1000 },
                    { 124, 7, 4, 155000, 155000, 1000 },
                    { 125, 7, 5, 157500, 157500, 1000 },
                    { 126, 7, 6, 160020, 160020, 1000 },
                    { 127, 7, 7, 162560, 162560, 1000 },
                    { 128, 7, 8, 165120, 165120, 1000 },
                    { 129, 7, 9, 167700, 167700, 1000 },
                    { 130, 7, 10, 700000, 700000, 10000 },
                    { 131, 7, 11, 172920, 172920, 1000 },
                    { 132, 7, 12, 175560, 175560, 1000 },
                    { 133, 7, 13, 178220, 178220, 1000 },
                    { 134, 7, 14, 180900, 180900, 1000 },
                    { 135, 7, 15, 183600, 183600, 1000 },
                    { 136, 7, 16, 186320, 186320, 1000 },
                    { 137, 7, 17, 189060, 189060, 1000 },
                    { 138, 7, 18, 191820, 191820, 1000 },
                    { 139, 7, 19, 194600, 194600, 1000 },
                    { 140, 7, 20, 800000, 800000, 10000 },

                    { 141, 8, 1, 200220, 200220, 1000 },
                    { 142, 8, 2, 203060, 203060, 1000 },
                    { 143, 8, 3, 205920, 205920, 1000 },
                    { 144, 8, 4, 208800, 208800, 1000 },
                    { 145, 8, 5, 211700, 211700, 1000 },
                    { 146, 8, 6, 214620, 214620, 1000 },
                    { 147, 8, 7, 217560, 217560, 1000 },
                    { 148, 8, 8, 220520, 220520, 1000 },
                    { 149, 8, 9, 223500, 223500, 1000 },
                    { 150, 8, 10, 900000, 900000, 10000 },
                    { 151, 8, 11, 229520, 229520, 1000 },
                    { 152, 8, 12, 232560, 232560, 1000 },
                    { 153, 8, 13, 235620, 235620, 1000 },
                    { 154, 8, 14, 238700, 238700, 1000 },
                    { 155, 8, 15, 241800, 241800, 1000 },
                    { 156, 8, 16, 244920, 244920, 1000 },
                    { 157, 8, 17, 248060, 248060, 1000 },
                    { 158, 8, 18, 251220, 251220, 1000 },
                    { 159, 8, 19, 254400, 254400, 1000 },
                    { 160, 8, 20, 1000000, 1000000, 10000 },

                    { 161, 9, 1, 260820, 260820, 1000 },
                    { 162, 9, 2, 264060, 264060, 1000 },
                    { 163, 9, 3, 267320, 267320, 1000 },
                    { 164, 9, 4, 270600, 270600, 1000 },
                    { 165, 9, 5, 273900, 273900, 1000 },
                    { 166, 9, 6, 277220, 277220, 1000 },
                    { 167, 9, 7, 280560, 280560, 1000 },
                    { 168, 9, 8, 283920, 283920, 1000 },
                    { 169, 9, 9, 287300, 287300, 1000 },
                    { 170, 9, 10, 1200000, 1200000, 10000 },
                    { 171, 9, 11, 294120, 294120, 1000 },
                    { 172, 9, 12, 297560, 297560, 1000 },
                    { 173, 9, 13, 301020, 301020, 1000 },
                    { 174, 9, 14, 304500, 304500, 1000 },
                    { 175, 9, 15, 308000, 308000, 1000 },
                    { 176, 9, 16, 311520, 311520, 1000 },
                    { 177, 9, 17, 315060, 315060, 1000 },
                    { 178, 9, 18, 318620, 318620, 1000 },
                    { 179, 9, 19, 322200, 322200, 1000 },
                    { 180, 9, 20, 1400000, 1400000, 10000 },

                    { 181, 10, 1, 329420, 329420, 1000 },
                    { 182, 10, 2, 333060, 333060, 1000 },
                    { 183, 10, 3, 336720, 336720, 1000 },
                    { 184, 10, 4, 340400, 340400, 1000 },
                    { 185, 10, 5, 344100, 344100, 1000 },
                    { 186, 10, 6, 347820, 347820, 1000 },
                    { 187, 10, 7, 351560, 351560, 1000 },
                    { 188, 10, 8, 355320, 355320, 1000 },
                    { 189, 10, 9, 359100, 359100, 1000 },
                    { 190, 10, 10, 1600000, 1600000, 10000 },
                    { 191, 10, 11, 366720, 366720, 1000 },
                    { 192, 10, 12, 370560, 370560, 1000 },
                    { 193, 10, 13, 374420, 374420, 1000 },
                    { 194, 10, 14, 378300, 378300, 1000 },
                    { 195, 10, 15, 382200, 382200, 1000 },
                    { 196, 10, 16, 386120, 386120, 1000 },
                    { 197, 10, 17, 390060, 390060, 1000 },
                    { 198, 10, 18, 394020, 394020, 1000 },
                    { 199, 10, 19, 398000, 398000, 1000 },
                    { 200, 10, 20, 2000000, 2000000, 10000 },
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Enemies");

            migrationBuilder.DropTable(
                name: "Levels");

            migrationBuilder.DropTable(
                name: "Areas");
        }
    }
}
